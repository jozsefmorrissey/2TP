{"content":"<pre>&lt;div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Fun with docker&lt;/h2&gt;\n    &lt;h2&gt;hello world&lt;/h2&gt;\n\n    &lt;p&gt;\n      The following commands will run the application within a docker\n      container\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;{{dockerCommand}}&lt;/b&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;b&gt;./run.sh&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Terminal Commands&lt;/h2&gt;\n    &lt;p&gt;\n      The files containing the data are encrypted and admin protected therefore\n      admin privaliges are required. This means the following commands will be\n      prefixed by:\n      &lt;br&gt;\n      &lt;b&gt;sudo confidentalInfo.sh...&lt;/b&gt;\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"cmd in cmds\"&gt;\n        &lt;b&gt;{{cmd}}&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Server&lt;/h2&gt;\n    &lt;p&gt;\n      A server was added to allow docker containers to easily communicate.\n    &lt;/p&gt;\n    &lt;p&gt;\n      These urls are secured with a random token and are hosted by the same domain.\n      Meaning they are prefixed by:\n      &lt;br&gt;\n      {{domain}}\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"url in urls\"&gt;\n        &lt;b&gt;{{url}} &lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre>","data":"<div>{<br>&nbsp; \"dockerCommand\": \"docker run -p $dockerPort:$appPort -ti pass/ub bash\",<br>&nbsp; \"cmds\": {<br>&nbsp; &nbsp; \"edit\": \"edit COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"view\": \"view COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"value\": \"value COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"update\": \"update COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"replace\": \"replace COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"remove\": \"remove COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"log\": \"log \",<br>&nbsp; &nbsp; \"help\": \"help\",<br>&nbsp; &nbsp; \"setup-server\": \"setup-server COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"stop-server\": \"stop-server PORT\",<br>&nbsp; &nbsp; \"start-server\": \"start-server PORT\"<br>&nbsp; },<br>&nbsp; \"urls\": [<br>&nbsp; &nbsp; \"/password/get\"<br>&nbsp; ]<br>}</div>","links":{"Fun":"/test.html","testJson":"/test.json","hello":"std.docker"},"css":"<div>test {<br>&nbsp; overflow: hidden;<br>}<br><br></div>","keywords":{"$dockerPort":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; This is the port the docker container will connect to the application port<br>&nbsp; &nbsp; and expose on your local.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","/password/get":"<pre>&lt;p&gt;<br>&nbsp; This url is used to get password values. You need to have a token in order to<br>&nbsp; recieve the password.<br>&nbsp; &lt;div&gt;<br>&nbsp; &nbsp; &lt;h4&gt;Post parameters&lt;/h4&gt;<br>&nbsp; &nbsp; &lt;ul&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;collectionIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;passwordIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;token&lt;/li&gt;<br>&nbsp; &nbsp; &lt;/ul&gt;<br>&nbsp; &lt;/div&gt;<br>&lt;/p&gt;</pre>","appPort":"<pre>&lt;div&gt;<br>&nbsp; This variable needs to be the port that the server will be running on<br>&nbsp; within the docker container. This port can be determined by running<br>&nbsp; the following command:<br>&nbsp; &lt;br&gt;<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo ./confidentalInfo.sh value confidentalInfo port<br>&lt;/div&gt;</pre>","COLLECTION_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; This allows you to group your identifiers. Identifies with the same group will<br>&nbsp; be located in the same encrypted file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; Using a unique &lt;z&gt;COLLECTION_IDENTIFIER&lt;/z&gt; it will restrict one password to each<br>&nbsp; file.<br>&lt;/p&gt;</pre>","collectionIdentifier":"<div>@COLLECTION_IDENTIFIER</div>","docker":"<pre>&lt;b&gt;<br>&nbsp; A light weight container utility for isolating and standardizing<br>&nbsp; the environment in which your application runs.<br>&nbsp; &lt;br&gt;<br>&nbsp; &lt;a href='https://docs.docker.com/'&gt;Docker Website&lt;/a&gt;<br>&lt;/b&gt;</pre>","dockerCommand":"<pre>&lt;div&gt;<br>&nbsp; &lt;b&gt;{{dockerCommand}}&lt;/b&gt;<br>&lt;/div&gt;</pre>","edit":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b class='warning'&gt;AVOID USING THIS COMMAND!&lt;/b&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; To help prevent accedental password loss the the old contents are saved<br>&nbsp; &nbsp; within the log file when you close the editor. This could result in a log<br>&nbsp; &nbsp; file containing most of your current passwords.<br>&nbsp; &nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &nbsp; It is Much more secure to use view command to view file and update command<br>&nbsp; &nbsp; to to change values.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","FILE_LOC":"<pre>&lt;p&gt;<br>&nbsp; The file you wish to perform the given opperation on.<br>&lt;/p&gt;</pre>","help":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; If you need &lt;b&gt;help&lt;/b&gt; understanding what &lt;b&gt;help&lt;/b&gt; is I can't<br>&nbsp; &nbsp; &lt;b&gt;help&lt;/b&gt; you.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","log":"<pre>&lt;p&gt;<br>&nbsp; The &lt;z&gt;log&lt;/z&gt; exists to aid you in acidental overwrites. It saves data after it has<br>&nbsp; been updated. So Ideally, only old usless info should be found in this file.<br>&nbsp; &lt;br&gt;<br>&nbsp; &lt;b&gt;However&lt;/b&gt;, see edit command to uderstand how current passwords may be<br>&nbsp; saved.<br>&lt;/p&gt;</pre>","NEW_VALUE":"<pre>&lt;p&gt;\n  A new value to be assigned to the given identifier within a given collection.\n&lt;/p&gt;</pre>","PASSWORD_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; Values are saved as a key value pair within the encrypted files. This<br>&nbsp; identifies the which value to retrieve within the specified collection.<br>&lt;/p&gt;</pre>","passwordIdentifier":"<div>@PASSWORD_IDENTIFIER</div>","PORT":"<pre>&lt;p&gt;<br>&nbsp; &lt;div class='center'&gt;&lt;b&gt;{{currPort}}&lt;/b&gt;&lt;/div&gt;<br>&nbsp; The port that the server is to be run or currently is on.<br>&lt;/p&gt;</pre>","remove":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","replace":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","run.sh":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; A simple script that:<br>&nbsp; &lt;/p&gt;<br>&nbsp; &lt;ul&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; Opens this help webpage<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; Starts application within docker container, server can<br>&nbsp; &nbsp; &nbsp; be reached on port shown in this dockerCommand<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &lt;/ul&gt;<br>&lt;/div&gt;</pre>","setup-server":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;This command does two things:&lt;/p&gt;<br>&nbsp; &lt;ol&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; Creates a token - to be passed as a post parameter when accessing<br>&nbsp; &nbsp; &nbsp; passwords via the server.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; While creating the token you can add a password to the collection.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &lt;/ol&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b&gt;NOTE&lt;/b&gt;: PASSWORD_IDENTIFIER and NEW_VALUE are both optional.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","start-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. The &lt;b&gt;default&lt;/b&gt; becomes the last port the<br>&nbsp; application was run on.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; The current default is &lt;b id='curr-port'&gt;{{currPort}}&lt;/b&gt;.<br>&lt;/p&gt;</pre>","stop-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. By &lt;b&gt;default&lt;/b&gt; it will kill the process<br>&nbsp; running on the last port this application was started from.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &lt;b&gt;NOTE&lt;b&gt;: This will kill any proccess running on the given port<br>&lt;/p&gt;</pre>","sudo":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; Out side of a docker container this program requires admin privileges.<br>&nbsp; &nbsp; These privileges allow the script to prevent any other users from accessing<br>&nbsp; &nbsp; these files. In retro spect I would have liked to lock this based on a<br>&nbsp; &nbsp; user instead of admin but what the hell it works.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","token":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; A collection &lt;z&gt;token&lt;/z&gt; is used to verify a request has autorization to<br>&nbsp; &nbsp; access passwords.<br>&nbsp; &nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &nbsp; You can access your &lt;z&gt;token&lt;/z&gt; with:<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; sudo confidentalInfo.sh value COLLECTION_IDENTIFIER &lt;z&gt;token&lt;/z&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; For instance your &lt;z&gt;token&lt;/z&gt; for the confidentalInfo collection is: {{token}}<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; You must pass this &lt;z&gt;token&lt;/z&gt; to your application in order to access you passwords.<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; If you want some additional security you can set &lt;z&gt;update&lt;/z&gt;Tokens=true, within<br>&nbsp; &nbsp; a given collection and the application will update the token every time it<br>&nbsp; &nbsp; is requested.<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; &lt;b&gt;Note&lt;/b&gt;: Tokens are special in that you do not have to set them. If you<br>&nbsp; &nbsp; request a &lt;z&gt;token&lt;/z&gt; that does not exist. It will be generated.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","update":"<pre>&lt;p&gt;\n  This updates the identifier with the new value.\n  &lt;br&gt;&lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: Leaving the newVal blank will a random password. If you do not need to type the password often you\n  should use this method it is far more secure than a password you are likely\n  to create.\n&lt;/p&gt;</pre>","value":"<pre>&lt;p&gt;<br>&nbsp; The command will print the value to the command line. I have not found any<br>&nbsp; source that says the terminal stores program output anywhere. You should<br>&nbsp; atleast make sure that you clear or reset the terminal shortly after using<br>&nbsp; this command.<br>&lt;/p&gt;</pre>","view":"<pre>&lt;p&gt;<br>&nbsp; This creates a temporary folder that displays the contents of a given<br>&nbsp; collection, and it is destroyed when gedit closes.<br>&lt;/p&gt;</pre>","random password":"<div>By default this is a random string of 30 characters making it next to impossible to guess.</div>","random token":"<pre>You can set this value. However by using the server-setup a random password is generated.</pre>"},"_keywords":{}},
{"content":"<pre>&lt;div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Install&lt;/h2&gt;\n    &lt;p&gt;\n      Simply clone from git\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;git clone https://github.com/jozsefmorrissey/PasswordServer.git&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Setup&lt;/h2&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;./run.sh - linux docker script&lt;/b&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;b&gt;./installGlobal.sh - linux bin installation&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Terminal Commands&lt;/h2&gt;\n    &lt;p&gt;\n      The files containing the data are encrypted and admin protected therefore\n      admin privaliges are required. This means the following commands will be\n      prefixed by:\n      &lt;br&gt;\n      &lt;b&gt;sudo confidentalInfo.sh...&lt;/b&gt;\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"cmd in cmds\"&gt;\n        &lt;b&gt;{{cmd}}&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Server&lt;/h2&gt;\n    &lt;p&gt;\n      A server was added to allow docker containers to easily communicate.\n    &lt;/p&gt;\n    &lt;p&gt;\n      These urls are secured with a random token.\n      &lt;br&gt;\n      http://www.localhost:[default-port]...\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"url in urls\"&gt;\n        &lt;b&gt;{{url}} &lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre>","data":"<div>{<br>&nbsp; \"dockerCommand\": \"docker run -p $dockerPort:$appPort -ti pass/ub bash\",<br>&nbsp; \"cmds\": {<br>&nbsp; &nbsp; \"edit\": \"edit COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"view\": \"view COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"value\": \"value COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"update\": \"update COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"replace\": \"replace COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"remove\": \"remove COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"log\": \"log \",<br>&nbsp; &nbsp; \"help\": \"help\",<br>&nbsp; &nbsp; \"setup-server\": \"setup-server COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"stop-server\": \"stop-server PORT\",<br>&nbsp; &nbsp; \"start-server\": \"start-server PORT\",<br>&nbsp; &nbsp; \"default-port\": \"default-port\",<br>&nbsp; &nbsp; \"get-with-token\": \"get-with-token TOKEN COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\"<br>&nbsp; },<br>&nbsp; \"urls\": [<br>&nbsp; &nbsp; \"/password/get\"<br>&nbsp; ]<br>}</div>","links":{"Fun":"/test.html","testJson":"/test.json","hello":"std.docker"},"css":"<div>test {<br>&nbsp; overflow: hidden;<br>}<br><br></div>","keywords":{"$dockerPort":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; This is the port the docker container will connect to the application port<br>&nbsp; &nbsp; and expose on your local.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","/password/get":"<pre>&lt;p&gt;<br>&nbsp; This url is used to get password values. You need to have a token in order to<br>&nbsp; recieve the password.<br>&nbsp; &lt;div&gt;<br>&nbsp; &nbsp; &lt;h4&gt;Post parameters&lt;/h4&gt;<br>&nbsp; &nbsp; &lt;ul&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;collectionIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;passwordIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;token&lt;/li&gt;<br>&nbsp; &nbsp; &lt;/ul&gt;<br>&nbsp; &lt;/div&gt;<br>&lt;/p&gt;</pre>","appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","COLLECTION_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; This allows you to group your identifiers. Identifies with the same group will<br>&nbsp; be located in the same encrypted file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; Using a unique &lt;z&gt;COLLECTION_IDENTIFIER&lt;/z&gt; it will restrict one password to each<br>&nbsp; file.<br>&lt;/p&gt;</pre>","collectionIdentifier":"<div>@COLLECTION_IDENTIFIER</div>","docker":"<pre>&lt;b&gt;\n  A light weight container utility for isolating and standardizing\n  the environment in which your application runs.\n  &lt;br&gt;\n  &lt;a href='https://docs.docker.com/'&gt;Docker Website&lt;/a&gt;\n&lt;/b&gt;</pre>","dockerCommand":"<pre>&lt;div&gt;\n  &lt;b&gt;docker run --name confidentialInfo -v $installPath/info:/password-server/info -p $dockerPort:$appPort -ti pass/ub bash&lt;/b&gt;\n&lt;/div&gt;</pre>","edit":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b class='warning'&gt;AVOID USING THIS COMMAND!&lt;/b&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; To help prevent accedental password loss the the old contents are saved<br>&nbsp; &nbsp; within the log file when you close the editor. This could result in a log<br>&nbsp; &nbsp; file containing most of your current passwords.<br>&nbsp; &nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &nbsp; It is Much more secure to use view command to view file and update command<br>&nbsp; &nbsp; to to change values.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","FILE_LOC":"<pre>&lt;p&gt;<br>&nbsp; The file you wish to perform the given opperation on.<br>&lt;/p&gt;</pre>","help":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; If you need &lt;b&gt;help&lt;/b&gt; understanding what &lt;b&gt;help&lt;/b&gt; is I can't<br>&nbsp; &nbsp; &lt;b&gt;help&lt;/b&gt; you.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","log":"<pre>&lt;p&gt;<br>&nbsp; The &lt;z&gt;log&lt;/z&gt; exists to aid you in acidental overwrites. It saves data after it has<br>&nbsp; been updated. So Ideally, only old usless info should be found in this file.<br>&nbsp; &lt;br&gt;<br>&nbsp; &lt;b&gt;However&lt;/b&gt;, see edit command to uderstand how current passwords may be<br>&nbsp; saved.<br>&lt;/p&gt;</pre>","NEW_VALUE":"<pre>&lt;p&gt;\n  A new value to be assigned to the given identifier within a given collection.\n&lt;/p&gt;</pre>","PASSWORD_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; Values are saved as a key value pair within the encrypted files. This<br>&nbsp; identifies the which value to retrieve within the specified collection.<br>&lt;/p&gt;</pre>","passwordIdentifier":"<div>@PASSWORD_IDENTIFIER</div>","PORT":"<pre>&lt;p&gt;<br>&nbsp; &lt;div class='center'&gt;&lt;b&gt;{{currPort}}&lt;/b&gt;&lt;/div&gt;<br>&nbsp; The port that the server is to be run or currently is on.<br>&lt;/p&gt;</pre>","remove":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","replace":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","run.sh":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A simple script that:\n      Starts application within docker container, if you are on windows this dockerCommand should work if you have docker installed;\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","setup-server":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;This command does two things:&lt;/p&gt;<br>&nbsp; &lt;ol&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; Creates a token - to be passed as a post parameter when accessing<br>&nbsp; &nbsp; &nbsp; passwords via the server.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; While creating the token you can add a password to the collection.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &lt;/ol&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b&gt;NOTE&lt;/b&gt;: PASSWORD_IDENTIFIER and NEW_VALUE are both optional.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","start-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. The &lt;b&gt;default&lt;/b&gt; becomes the last port the<br>&nbsp; application was run on.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; The current default is &lt;b id='curr-port'&gt;{{currPort}}&lt;/b&gt;.<br>&lt;/p&gt;</pre>","stop-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. By &lt;b&gt;default&lt;/b&gt; it will kill the process<br>&nbsp; running on the last port this application was started from.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &lt;b&gt;NOTE&lt;b&gt;: This will kill any proccess running on the given port<br>&lt;/p&gt;</pre>","sudo":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; Out side of a docker container this program requires admin privileges.<br>&nbsp; &nbsp; These privileges allow the script to prevent any other users from accessing<br>&nbsp; &nbsp; these files. In retro spect I would have liked to lock this based on a<br>&nbsp; &nbsp; user instead of admin but what the hell it works.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","token":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A collection &lt;z&gt;token&lt;/z&gt; is used to verify a request has autorization to access passwords.\n    &lt;br&gt;&lt;br&gt;\n    You can access your &lt;z&gt;token&lt;/z&gt; with:\n    &lt;br&gt;\n    sudo confidentalInfo.sh value COLLECTION_IDENTIFIER &lt;z&gt;token&lt;/z&gt;\n    &lt;br&gt;\n    You must pass this &lt;z&gt;token&lt;/z&gt; to your application in order to access you passwords.\n    &lt;br&gt;\n    &lt;br&gt;\n    If you want some additional security you can set &lt;z&gt;update&lt;/z&gt;Tokens=true, within\n    a given collection and the application will update the token every time it\n    is requested.\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;b&gt;Note&lt;/b&gt;: Tokens are special in that you do not have to set them. If you\n    request a &lt;z&gt;token&lt;/z&gt; that does not exist. It will be generated.\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","update":"<pre>&lt;p&gt;\n  This updates the identifier with the new value.\n  &lt;br&gt;&lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: Leaving the newVal blank will a random password. If you do not need to type the password often you\n  should use this method it is far more secure than a password you are likely\n  to create.\n&lt;/p&gt;</pre>","value":"<pre>&lt;p&gt;<br>&nbsp; The command will print the value to the command line. I have not found any<br>&nbsp; source that says the terminal stores program output anywhere. You should<br>&nbsp; atleast make sure that you clear or reset the terminal shortly after using<br>&nbsp; this command.<br>&lt;/p&gt;</pre>","view":"<pre>&lt;p&gt;<br>&nbsp; This creates a temporary folder that displays the contents of a given<br>&nbsp; collection, and it is destroyed when gedit closes.<br>&lt;/p&gt;</pre>","random password":"<div>By default this is a random string of 30 characters making it next to impossible to guess.</div>","random token":"<div>You can set this value. However by using the server-setup a random password is generated.</div>","default-port":"<div>The default port is always the last port you ran the server on. If you forget the port this command will print it.</div>","get-with-token":"<div>This command is purely for the node server to retrieve passwords with the token.</div>","$installPath":"<pre>&lt;p&gt;\n  The path to then PasswordServer installation directory.\n&lt;/p&gt;</pre>","$appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>"},"_keywords":{}},
{"content":"<pre>&lt;div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Install&lt;/h2&gt;\n    &lt;p&gt;\n      Simply clone from git\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;git clone https://github.com/jozsefmorrissey/PasswordServer.git&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Setup&lt;/h2&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;./run.sh - linux docker script&lt;/b&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;b&gt;./installGlobal.sh - linux bin installation&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Terminal Commands&lt;/h2&gt;\n    &lt;p&gt;\n      The files containing the data are encrypted and admin protected therefore\n      admin privaliges are required. This means the following commands will be\n      prefixed by:\n      &lt;br&gt;\n      &lt;b&gt;sudo confidentalInfo.sh...&lt;/b&gt;\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"cmd in cmds\"&gt;\n        &lt;b&gt;{{cmd}}&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Server&lt;/h2&gt;\n    &lt;p&gt;\n      A server was added to allow docker containers to easily communicate.\n    &lt;/p&gt;\n    &lt;p&gt;\n      These urls are secured with a random token.\n      &lt;br&gt;\n      http://www.localhost:[default-port]...\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"url in urls\"&gt;\n        &lt;b&gt;{{url}} &lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre>","data":"<div>{<br>&nbsp; \"dockerCommand\": \"docker run -p $dockerPort:$appPort -ti pass/ub bash\",<br>&nbsp; \"cmds\": {<br>&nbsp; &nbsp; \"edit\": \"edit COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"view\": \"view COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"value\": \"value COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"update\": \"update COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"replace\": \"replace COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"remove\": \"remove COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"log\": \"log \",<br>&nbsp; &nbsp; \"help\": \"help\",<br>&nbsp; &nbsp; \"setup-server\": \"setup-server COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"stop-server\": \"stop-server PORT\",<br>&nbsp; &nbsp; \"start-server\": \"start-server PORT\",<br>&nbsp; &nbsp; \"default-port\": \"default-port\",<br>&nbsp; &nbsp; \"get-with-token\": \"get-with-token TOKEN COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\"<br>&nbsp; },<br>&nbsp; \"urls\": [<br>&nbsp; &nbsp; \"/password/get\"<br>&nbsp; ]<br>}</div>","links":{"Fun":"/test.html","testJson":"/test.json","hello":"std.docker","Docker":"https://docs.docker.com"},"css":"<div>test {<br>&nbsp; overflow: hidden;<br>}<br><br></div>","keywords":{"$dockerPort":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; This is the port the docker container will connect to the application port<br>&nbsp; &nbsp; and expose on your local.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","/password/get":"<pre>&lt;p&gt;<br>&nbsp; This url is used to get password values. You need to have a token in order to<br>&nbsp; recieve the password.<br>&nbsp; &lt;div&gt;<br>&nbsp; &nbsp; &lt;h4&gt;Post parameters&lt;/h4&gt;<br>&nbsp; &nbsp; &lt;ul&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;collectionIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;passwordIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;token&lt;/li&gt;<br>&nbsp; &nbsp; &lt;/ul&gt;<br>&nbsp; &lt;/div&gt;<br>&lt;/p&gt;</pre>","appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","COLLECTION_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; This allows you to group your identifiers. Identifies with the same group will<br>&nbsp; be located in the same encrypted file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; Using a unique &lt;z&gt;COLLECTION_IDENTIFIER&lt;/z&gt; it will restrict one password to each<br>&nbsp; file.<br>&lt;/p&gt;</pre>","collectionIdentifier":"<div>@COLLECTION_IDENTIFIER</div>","docker":"<pre>&lt;b&gt;\n  A light weight container utility for isolating and standardizing\n  the environment in which your application runs.\n  &lt;br&gt;\n  &lt;br&gt;\n  Docker\n&lt;/b&gt;</pre>","dockerCommand":"<pre>&lt;div&gt;\n  &lt;b&gt;docker run --name confidentialInfo -v $installPath/info:/password-server/info -p $dockerPort:$appPort -ti pass/ub bash&lt;/b&gt;\n&lt;/div&gt;</pre>","edit":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b class='warning'&gt;AVOID USING THIS COMMAND!&lt;/b&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; To help prevent accedental password loss the the old contents are saved<br>&nbsp; &nbsp; within the log file when you close the editor. This could result in a log<br>&nbsp; &nbsp; file containing most of your current passwords.<br>&nbsp; &nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &nbsp; It is Much more secure to use view command to view file and update command<br>&nbsp; &nbsp; to to change values.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","FILE_LOC":"<pre>&lt;p&gt;<br>&nbsp; The file you wish to perform the given opperation on.<br>&lt;/p&gt;</pre>","help":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; If you need &lt;b&gt;help&lt;/b&gt; understanding what &lt;b&gt;help&lt;/b&gt; is I can't<br>&nbsp; &nbsp; &lt;b&gt;help&lt;/b&gt; you.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","log":"<pre>&lt;p&gt;<br>&nbsp; The &lt;z&gt;log&lt;/z&gt; exists to aid you in acidental overwrites. It saves data after it has<br>&nbsp; been updated. So Ideally, only old usless info should be found in this file.<br>&nbsp; &lt;br&gt;<br>&nbsp; &lt;b&gt;However&lt;/b&gt;, see edit command to uderstand how current passwords may be<br>&nbsp; saved.<br>&lt;/p&gt;</pre>","NEW_VALUE":"<pre>&lt;p&gt;\n  A new value to be assigned to the given identifier within a given collection.\n&lt;/p&gt;</pre>","PASSWORD_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; Values are saved as a key value pair within the encrypted files. This<br>&nbsp; identifies the which value to retrieve within the specified collection.<br>&lt;/p&gt;</pre>","passwordIdentifier":"<div>@PASSWORD_IDENTIFIER</div>","PORT":"<pre>&lt;p&gt;<br>&nbsp; &lt;div class='center'&gt;&lt;b&gt;{{currPort}}&lt;/b&gt;&lt;/div&gt;<br>&nbsp; The port that the server is to be run or currently is on.<br>&lt;/p&gt;</pre>","remove":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","replace":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","run.sh":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A simple script that:\n      Starts application within docker container, if you are on windows this dockerCommand should work if you have docker installed;\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","setup-server":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;This command does two things:&lt;/p&gt;<br>&nbsp; &lt;ol&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; Creates a token - to be passed as a post parameter when accessing<br>&nbsp; &nbsp; &nbsp; passwords via the server.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; While creating the token you can add a password to the collection.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &lt;/ol&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b&gt;NOTE&lt;/b&gt;: PASSWORD_IDENTIFIER and NEW_VALUE are both optional.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","start-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. The &lt;b&gt;default&lt;/b&gt; becomes the last port the<br>&nbsp; application was run on.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; The current default is &lt;b id='curr-port'&gt;{{currPort}}&lt;/b&gt;.<br>&lt;/p&gt;</pre>","stop-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. By &lt;b&gt;default&lt;/b&gt; it will kill the process<br>&nbsp; running on the last port this application was started from.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &lt;b&gt;NOTE&lt;b&gt;: This will kill any proccess running on the given port<br>&lt;/p&gt;</pre>","sudo":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; Out side of a docker container this program requires admin privileges.<br>&nbsp; &nbsp; These privileges allow the script to prevent any other users from accessing<br>&nbsp; &nbsp; these files. In retro spect I would have liked to lock this based on a<br>&nbsp; &nbsp; user instead of admin but what the hell it works.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","token":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A collection &lt;z&gt;token&lt;/z&gt; is used to verify a request has autorization to access passwords.\n    &lt;br&gt;&lt;br&gt;\n    You can access your &lt;z&gt;token&lt;/z&gt; with:\n    &lt;br&gt;\n    sudo confidentalInfo.sh value COLLECTION_IDENTIFIER &lt;z&gt;token&lt;/z&gt;\n    &lt;br&gt;\n    You must pass this &lt;z&gt;token&lt;/z&gt; to your application in order to access you passwords.\n    &lt;br&gt;\n    &lt;br&gt;\n    If you want some additional security you can set &lt;z&gt;update&lt;/z&gt;Tokens=true, within\n    a given collection and the application will update the token every time it\n    is requested.\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;b&gt;Note&lt;/b&gt;: Tokens are special in that you do not have to set them. If you\n    request a &lt;z&gt;token&lt;/z&gt; that does not exist. It will be generated.\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","update":"<pre>&lt;p&gt;\n  This updates the identifier with the new value.\n  &lt;br&gt;&lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: Leaving the newVal blank will a random password. If you do not need to type the password often you\n  should use this method it is far more secure than a password you are likely\n  to create.\n&lt;/p&gt;</pre>","value":"<pre>&lt;p&gt;<br>&nbsp; The command will print the value to the command line. I have not found any<br>&nbsp; source that says the terminal stores program output anywhere. You should<br>&nbsp; atleast make sure that you clear or reset the terminal shortly after using<br>&nbsp; this command.<br>&lt;/p&gt;</pre>","view":"<pre>&lt;p&gt;<br>&nbsp; This creates a temporary folder that displays the contents of a given<br>&nbsp; collection, and it is destroyed when gedit closes.<br>&lt;/p&gt;</pre>","random password":"<div>By default this is a random string of 30 characters making it next to impossible to guess.</div>","random token":"<div>You can set this value. However by using the server-setup a random password is generated.</div>","default-port":"<div>The default port is always the last port you ran the server on. If you forget the port this command will print it.</div>","get-with-token":"<div>This command is purely for the node server to retrieve passwords with the token.</div>","$installPath":"<pre>&lt;p&gt;\n  The path to then PasswordServer installation directory.\n&lt;/p&gt;</pre>","$appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>"},"_keywords":{}},
{"content":"<pre>&lt;div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Install&lt;/h2&gt;\n    &lt;p&gt;\n      Simply clone from git\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;git clone https://github.com/jozsefmorrissey/PasswordServer.git&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Setup&lt;/h2&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;./run.sh - linux docker script&lt;/b&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;b&gt;./installGlobal.sh - linux bin installation&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Terminal Commands&lt;/h2&gt;\n    &lt;p&gt;\n      The files containing the data are encrypted and admin protected therefore\n      admin privaliges are required. This means the following commands will be\n      prefixed by:\n      &lt;br&gt;\n      &lt;b&gt;sudo confidentalInfo.sh...&lt;/b&gt;\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"cmd in cmds\"&gt;\n        &lt;b&gt;{{cmd}}&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Server&lt;/h2&gt;\n    &lt;p&gt;\n      A server was added to allow docker containers to easily communicate.\n    &lt;/p&gt;\n    &lt;p&gt;\n      These urls are secured with a random token.\n      &lt;br&gt;\n      http://www.localhost:[default-port]...\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"url in urls\"&gt;\n        &lt;b&gt;{{url}} &lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre>","data":"<div>{<br>&nbsp; \"dockerCommand\": \"docker run -p $dockerPort:$appPort -ti pass/ub bash\",<br>&nbsp; \"cmds\": {<br>&nbsp; &nbsp; \"edit\": \"edit COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"view\": \"view COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"value\": \"value COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"update\": \"update COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"replace\": \"replace COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"remove\": \"remove COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"log\": \"log \",<br>&nbsp; &nbsp; \"help\": \"help\",<br>&nbsp; &nbsp; \"setup-server\": \"setup-server COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"stop-server\": \"stop-server PORT\",<br>&nbsp; &nbsp; \"start-server\": \"start-server PORT\",<br>&nbsp; &nbsp; \"default-port\": \"default-port\",<br>&nbsp; &nbsp; \"get-with-token\": \"get-with-token TOKEN COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"get-token-docker\": \"get-token-docker COLLECTION_IDENTIFIER\"<br>&nbsp; },<br>&nbsp; \"urls\": [<br>&nbsp; &nbsp; \"/password/get\"<br>&nbsp; ]<br>}</div>","links":{"Fun":"/test.html","testJson":"/test.json","hello":"std.docker","Docker":"https://docs.docker.com"},"css":"<div>test {<br>&nbsp; overflow: hidden;<br>}<br><br></div>","keywords":{"$dockerPort":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; This is the port the docker container will connect to the application port<br>&nbsp; &nbsp; and expose on your local.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","/password/get":"<pre>&lt;p&gt;<br>&nbsp; This url is used to get password values. You need to have a token in order to<br>&nbsp; recieve the password.<br>&nbsp; &lt;div&gt;<br>&nbsp; &nbsp; &lt;h4&gt;Post parameters&lt;/h4&gt;<br>&nbsp; &nbsp; &lt;ul&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;collectionIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;passwordIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;token&lt;/li&gt;<br>&nbsp; &nbsp; &lt;/ul&gt;<br>&nbsp; &lt;/div&gt;<br>&lt;/p&gt;</pre>","appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","COLLECTION_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; This allows you to group your identifiers. Identifies with the same group will<br>&nbsp; be located in the same encrypted file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; Using a unique &lt;z&gt;COLLECTION_IDENTIFIER&lt;/z&gt; it will restrict one password to each<br>&nbsp; file.<br>&lt;/p&gt;</pre>","collectionIdentifier":"<div>@COLLECTION_IDENTIFIER</div>","docker":"<pre>&lt;b&gt;\n  A light weight container utility for isolating and standardizing\n  the environment in which your application runs.\n  &lt;br&gt;\n  &lt;br&gt;\n  Docker\n&lt;/b&gt;</pre>","dockerCommand":"<pre>&lt;div&gt;\n  &lt;b&gt;docker run --name confidentialInfo -v $installPath/info:/password-server/info -p $dockerPort:$appPort -ti pass/ub bash&lt;/b&gt;\n&lt;/div&gt;</pre>","edit":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b class='warning'&gt;AVOID USING THIS COMMAND!&lt;/b&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; To help prevent accedental password loss the the old contents are saved<br>&nbsp; &nbsp; within the log file when you close the editor. This could result in a log<br>&nbsp; &nbsp; file containing most of your current passwords.<br>&nbsp; &nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &nbsp; It is Much more secure to use view command to view file and update command<br>&nbsp; &nbsp; to to change values.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","FILE_LOC":"<pre>&lt;p&gt;<br>&nbsp; The file you wish to perform the given opperation on.<br>&lt;/p&gt;</pre>","help":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; If you need &lt;b&gt;help&lt;/b&gt; understanding what &lt;b&gt;help&lt;/b&gt; is I can't<br>&nbsp; &nbsp; &lt;b&gt;help&lt;/b&gt; you.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","log":"<pre>&lt;p&gt;<br>&nbsp; The &lt;z&gt;log&lt;/z&gt; exists to aid you in acidental overwrites. It saves data after it has<br>&nbsp; been updated. So Ideally, only old usless info should be found in this file.<br>&nbsp; &lt;br&gt;<br>&nbsp; &lt;b&gt;However&lt;/b&gt;, see edit command to uderstand how current passwords may be<br>&nbsp; saved.<br>&lt;/p&gt;</pre>","NEW_VALUE":"<pre>&lt;p&gt;\n  A new value to be assigned to the given identifier within a given collection.\n&lt;/p&gt;</pre>","PASSWORD_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; Values are saved as a key value pair within the encrypted files. This<br>&nbsp; identifies the which value to retrieve within the specified collection.<br>&lt;/p&gt;</pre>","passwordIdentifier":"<div>@PASSWORD_IDENTIFIER</div>","PORT":"<pre>&lt;p&gt;<br>&nbsp; &lt;div class='center'&gt;&lt;b&gt;{{currPort}}&lt;/b&gt;&lt;/div&gt;<br>&nbsp; The port that the server is to be run or currently is on.<br>&lt;/p&gt;</pre>","remove":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","replace":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","run.sh":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A simple script that:\n      Starts application within docker container, if you are on windows this dockerCommand should work if you have docker installed;\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","setup-server":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;This command does two things:&lt;/p&gt;<br>&nbsp; &lt;ol&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; Creates a token - to be passed as a post parameter when accessing<br>&nbsp; &nbsp; &nbsp; passwords via the server.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; While creating the token you can add a password to the collection.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &lt;/ol&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b&gt;NOTE&lt;/b&gt;: PASSWORD_IDENTIFIER and NEW_VALUE are both optional.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","start-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. The &lt;b&gt;default&lt;/b&gt; becomes the last port the<br>&nbsp; application was run on.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; The current default is &lt;b id='curr-port'&gt;{{currPort}}&lt;/b&gt;.<br>&lt;/p&gt;</pre>","stop-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. By &lt;b&gt;default&lt;/b&gt; it will kill the process<br>&nbsp; running on the last port this application was started from.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &lt;b&gt;NOTE&lt;b&gt;: This will kill any proccess running on the given port<br>&lt;/p&gt;</pre>","sudo":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; Out side of a docker container this program requires admin privileges.<br>&nbsp; &nbsp; These privileges allow the script to prevent any other users from accessing<br>&nbsp; &nbsp; these files. In retro spect I would have liked to lock this based on a<br>&nbsp; &nbsp; user instead of admin but what the hell it works.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","token":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A collection &lt;z&gt;token&lt;/z&gt; is used to verify a request has autorization to access passwords.\n    &lt;br&gt;&lt;br&gt;\n    You can access your &lt;z&gt;token&lt;/z&gt; with:\n    &lt;br&gt;\n    sudo confidentalInfo.sh value COLLECTION_IDENTIFIER &lt;z&gt;token&lt;/z&gt;\n    &lt;br&gt;\n    You must pass this &lt;z&gt;token&lt;/z&gt; to your application in order to access you passwords.\n    &lt;br&gt;\n    &lt;br&gt;\n    If you want some additional security you can set &lt;z&gt;update&lt;/z&gt;Tokens=true, within\n    a given collection and the application will update the token every time it\n    is requested.\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;b&gt;Note&lt;/b&gt;: Tokens are special in that you do not have to set them. If you\n    request a &lt;z&gt;token&lt;/z&gt; that does not exist. It will be generated.\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","update":"<pre>&lt;p&gt;\n  This updates the identifier with the new value.\n  &lt;br&gt;&lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: Leaving the newVal blank will a random password. If you do not need to type the password often you\n  should use this method it is far more secure than a password you are likely\n  to create.\n&lt;/p&gt;</pre>","value":"<pre>&lt;p&gt;<br>&nbsp; The command will print the value to the command line. I have not found any<br>&nbsp; source that says the terminal stores program output anywhere. You should<br>&nbsp; atleast make sure that you clear or reset the terminal shortly after using<br>&nbsp; this command.<br>&lt;/p&gt;</pre>","view":"<pre>&lt;p&gt;<br>&nbsp; This creates a temporary folder that displays the contents of a given<br>&nbsp; collection, and it is destroyed when gedit closes.<br>&lt;/p&gt;</pre>","random password":"<div>By default this is a random string of 30 characters making it next to impossible to guess.</div>","random token":"<div>You can set this value. However by using the server-setup a random password is generated.</div>","default-port":"<div>The default port is always the last port you ran the server on. If you forget the port this command will print it.</div>","get-with-token":"<div>This command is purely for the node server to retrieve passwords with the token.</div>","$installPath":"<pre>&lt;p&gt;\n  The path to then PasswordServer installation directory.\n&lt;/p&gt;</pre>","$appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","get-token-docker":"<pre>&lt;p&gt;\n  Requests a then token for a given COLLECTION_IDENTIFIER from the running docker container.\n  &lt;br&gt;\n  &lt;br&gt;\n  Example use: java -jar application.jar $(sudo confidentialInfo.sh get-token-docker application)\n  &lt;br&gt;\n  &lt;br&gt;\n  Giving your application the token necessary to access all passwords  for your application.\n&lt;/p&gt;</pre>"},"_keywords":{}},
{"content":"<pre>&lt;div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Install&lt;/h2&gt;\n    &lt;p&gt;\n      Simply clone from git\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;git clone https://github.com/jozsefmorrissey/PasswordServer.git&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Setup&lt;/h2&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;./run.sh - linux docker script&lt;/b&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;b&gt;./installGlobal.sh - linux bin installation&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Terminal Commands&lt;/h2&gt;\n    &lt;p&gt;\n      The files containing the data are encrypted and admin protected therefore\n      admin privaliges are required. This means the following commands will be\n      prefixed by:\n      &lt;br&gt;\n      &lt;b&gt;sudo confidentalInfo.sh...&lt;/b&gt;\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"cmd in cmds\"&gt;\n        &lt;b&gt;{{cmd}}&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Server&lt;/h2&gt;\n    &lt;p&gt;\n      A server was added to allow docker containers to easily communicate.\n    &lt;/p&gt;\n    &lt;p&gt;\n      These urls are secured with a random token.\n      &lt;br&gt;\n      http://www.localhost:[default-port]...\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"url in urls\"&gt;\n        &lt;b&gt;{{url}} &lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre>","data":"<div>{<br>&nbsp; \"dockerCommand\": \"docker run -p $dockerPort:$appPort -ti pass/ub bash\",<br>&nbsp; \"cmds\": {<br>&nbsp; &nbsp; \"edit\": \"edit COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"view\": \"view COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"value\": \"value COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"update\": \"update COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"replace\": \"replace COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"remove\": \"remove COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"log\": \"log \",<br>&nbsp; &nbsp; \"help\": \"help\",<br>&nbsp; &nbsp; \"setup-server\": \"setup-server COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"stop-server\": \"stop-server PORT\",<br>&nbsp; &nbsp; \"start-server\": \"start-server PORT\",<br>&nbsp; &nbsp; \"default-port\": \"default-port\",<br>&nbsp; &nbsp; \"get-with-token\": \"get-with-token TOKEN COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"get-token-docker\": \"get-token-docker COLLECTION_IDENTIFIER\"<br>&nbsp; },<br>&nbsp; \"urls\": [<br>&nbsp; &nbsp; \"/password/get\"<br>&nbsp; ]<br>}</div>","links":{"Fun":"/test.html","testJson":"/test.json","hello":"std.docker","Docker":"https://docs.docker.com"},"css":"<div>test {<br>&nbsp; overflow: hidden;<br>}<br><br></div>","keywords":{"$dockerPort":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; This is the port the docker container will connect to the application port<br>&nbsp; &nbsp; and expose on your local.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","/password/get":"<pre>&lt;p&gt;<br>&nbsp; This url is used to get password values. You need to have a token in order to<br>&nbsp; recieve the password.<br>&nbsp; &lt;div&gt;<br>&nbsp; &nbsp; &lt;h4&gt;Post parameters&lt;/h4&gt;<br>&nbsp; &nbsp; &lt;ul&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;collectionIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;passwordIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;token&lt;/li&gt;<br>&nbsp; &nbsp; &lt;/ul&gt;<br>&nbsp; &lt;/div&gt;<br>&lt;/p&gt;</pre>","appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","COLLECTION_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; This allows you to group your identifiers. Identifies with the same group will<br>&nbsp; be located in the same encrypted file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; Using a unique &lt;z&gt;COLLECTION_IDENTIFIER&lt;/z&gt; it will restrict one password to each<br>&nbsp; file.<br>&lt;/p&gt;</pre>","collectionIdentifier":"<div>@COLLECTION_IDENTIFIER</div>","docker":"<pre>&lt;b&gt;\n  A light weight container utility for isolating and standardizing\n  the environment in which your application runs.\n  &lt;br&gt;\n  &lt;br&gt;\n  Docker\n&lt;/b&gt;</pre>","dockerCommand":"<pre>&lt;div&gt;\n  &lt;b&gt;docker run --name confidentialInfo -v $installPath/info:/password-server/info -p $dockerPort:$appPort -ti pass/ub bash&lt;/b&gt;\n&lt;/div&gt;</pre>","edit":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b class='warning'&gt;AVOID USING THIS COMMAND!&lt;/b&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; To help prevent accedental password loss the the old contents are saved<br>&nbsp; &nbsp; within the log file when you close the editor. This could result in a log<br>&nbsp; &nbsp; file containing most of your current passwords.<br>&nbsp; &nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &nbsp; It is Much more secure to use view command to view file and update command<br>&nbsp; &nbsp; to to change values.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","FILE_LOC":"<pre>&lt;p&gt;<br>&nbsp; The file you wish to perform the given opperation on.<br>&lt;/p&gt;</pre>","help":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; If you need &lt;b&gt;help&lt;/b&gt; understanding what &lt;b&gt;help&lt;/b&gt; is I can't<br>&nbsp; &nbsp; &lt;b&gt;help&lt;/b&gt; you.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","log":"<pre>&lt;p&gt;<br>&nbsp; The &lt;z&gt;log&lt;/z&gt; exists to aid you in acidental overwrites. It saves data after it has<br>&nbsp; been updated. So Ideally, only old usless info should be found in this file.<br>&nbsp; &lt;br&gt;<br>&nbsp; &lt;b&gt;However&lt;/b&gt;, see edit command to uderstand how current passwords may be<br>&nbsp; saved.<br>&lt;/p&gt;</pre>","NEW_VALUE":"<pre>&lt;p&gt;\n  A new value to be assigned to the given identifier within a given collection.\n&lt;/p&gt;</pre>","PASSWORD_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; Values are saved as a key value pair within the encrypted files. This<br>&nbsp; identifies the which value to retrieve within the specified collection.<br>&lt;/p&gt;</pre>","passwordIdentifier":"<div>@PASSWORD_IDENTIFIER</div>","PORT":"<pre>&lt;p&gt;<br>&nbsp; &lt;div class='center'&gt;&lt;b&gt;{{currPort}}&lt;/b&gt;&lt;/div&gt;<br>&nbsp; The port that the server is to be run or currently is on.<br>&lt;/p&gt;</pre>","remove":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","replace":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","run.sh":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A simple script that:\n      Starts application within docker container, if you are on windows this dockerCommand should work if you have docker installed;\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","setup-server":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;This command does two things:&lt;/p&gt;<br>&nbsp; &lt;ol&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; Creates a token - to be passed as a post parameter when accessing<br>&nbsp; &nbsp; &nbsp; passwords via the server.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; While creating the token you can add a password to the collection.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &lt;/ol&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b&gt;NOTE&lt;/b&gt;: PASSWORD_IDENTIFIER and NEW_VALUE are both optional.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","start-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. The &lt;b&gt;default&lt;/b&gt; becomes the last port the<br>&nbsp; application was run on.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; The current default is &lt;b id='curr-port'&gt;{{currPort}}&lt;/b&gt;.<br>&lt;/p&gt;</pre>","stop-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. By &lt;b&gt;default&lt;/b&gt; it will kill the process<br>&nbsp; running on the last port this application was started from.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &lt;b&gt;NOTE&lt;b&gt;: This will kill any proccess running on the given port<br>&lt;/p&gt;</pre>","sudo":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; Out side of a docker container this program requires admin privileges.<br>&nbsp; &nbsp; These privileges allow the script to prevent any other users from accessing<br>&nbsp; &nbsp; these files. In retro spect I would have liked to lock this based on a<br>&nbsp; &nbsp; user instead of admin but what the hell it works.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","token":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A collection &lt;z&gt;token&lt;/z&gt; is used to verify a request has autorization to access passwords.\n    &lt;br&gt;&lt;br&gt;\n    You can access your &lt;z&gt;token&lt;/z&gt; with:\n    &lt;br&gt;\n    sudo confidentalInfo.sh value COLLECTION_IDENTIFIER &lt;z&gt;token&lt;/z&gt;\n    &lt;br&gt;\n    You must pass this &lt;z&gt;token&lt;/z&gt; to your application in order to access you passwords.\n    &lt;br&gt;\n    &lt;br&gt;\n    If you want some additional security you can set &lt;z&gt;update&lt;/z&gt;Tokens=true, within\n    a given collection and the application will update the token every time it\n    is requested.\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;b&gt;Note&lt;/b&gt;: Tokens are special in that you do not have to set them. If you\n    request a &lt;z&gt;token&lt;/z&gt; that does not exist. It will be generated.\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","update":"<pre>&lt;p&gt;\n  This updates the identifier with the new value.\n  &lt;br&gt;&lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: Leaving the newVal blank will a random password. If you do not need to type the password often you\n  should use this method it is far more secure than a password you are likely\n  to create.\n&lt;/p&gt;</pre>","value":"<pre>&lt;p&gt;<br>&nbsp; The command will print the value to the command line. I have not found any<br>&nbsp; source that says the terminal stores program output anywhere. You should<br>&nbsp; atleast make sure that you clear or reset the terminal shortly after using<br>&nbsp; this command.<br>&lt;/p&gt;</pre>","view":"<pre>&lt;p&gt;<br>&nbsp; This creates a temporary folder that displays the contents of a given<br>&nbsp; collection, and it is destroyed when gedit closes.<br>&lt;/p&gt;</pre>","random password":"<div>By default this is a random string of 30 characters making it next to impossible to guess.</div>","random token":"<div>You can set this value. However by using the server-setup a random password is generated.</div>","default-port":"<div>The default port is always the last port you ran the server on. If you forget the port this command will print it.</div>","get-with-token":"<div>This command is purely for the node server to retrieve passwords with the token.</div>","$installPath":"<pre>&lt;p&gt;\n  The path to then PasswordServer installation directory.\n&lt;/p&gt;</pre>","$appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","get-token-docker":"<pre>&lt;p&gt;\n  Requests a then token for a given COLLECTION_IDENTIFIER from the running docker container.\n  &lt;br&gt;\n  &lt;br&gt;\n  Example use: java -jar application.jar $(sudo confidentialInfo.sh get-token-docker application)\n  &lt;br&gt;\n  &lt;br&gt;\n  Giving your application the token necessary to access all passwords  for your application.\n&lt;/p&gt;</pre>"},"_keywords":{}},
{"content":"<pre>&lt;div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Install&lt;/h2&gt;\n    &lt;p&gt;\n      Simply clone from git\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;git clone https://github.com/jozsefmorrissey/PasswordServer.git&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Setup&lt;/h2&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;./run.sh - linux docker script&lt;/b&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;b&gt;./installGlobal.sh - linux bin installation&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Terminal Commands&lt;/h2&gt;\n    &lt;p&gt;\n      The files containing the data are encrypted and admin protected therefore\n      admin privaliges are required. This means the following commands will be\n      prefixed by:\n      &lt;br&gt;\n      &lt;b&gt;sudo confidentalInfo.sh...&lt;/b&gt;\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"cmd in cmds\"&gt;\n        &lt;b&gt;{{cmd}}&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Server&lt;/h2&gt;\n    &lt;p&gt;\n      A server was added to allow docker containers to easily communicate.\n    &lt;/p&gt;\n    &lt;p&gt;\n      These urls are secured with a random token.\n      &lt;br&gt;\n      http://www.localhost:[default-port]...\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"url in urls\"&gt;\n        &lt;b&gt;{{url}} &lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre>","data":"<div>{<br>&nbsp; \"dockerCommand\": \"docker run -p $dockerPort:$appPort -ti pass/ub bash\",<br>&nbsp; \"cmds\": {<br>&nbsp; &nbsp; \"edit\": \"edit COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"view\": \"view COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"value\": \"value COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"update\": \"update COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"replace\": \"replace COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"remove\": \"remove COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"log\": \"log \",<br>&nbsp; &nbsp; \"help\": \"help\",<br>&nbsp; &nbsp; \"setup-server\": \"setup-server COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"stop-server\": \"stop-server PORT\",<br>&nbsp; &nbsp; \"start-server\": \"start-server PORT\",<br>&nbsp; &nbsp; \"default-port\": \"default-port\",<br>&nbsp; &nbsp; \"get-with-token\": \"get-with-token TOKEN COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"get-token-docker\": \"get-token-docker COLLECTION_IDENTIFIER\"<br>&nbsp; },<br>&nbsp; \"urls\": [<br>&nbsp; &nbsp; \"/password/get\"<br>&nbsp; ]<br>}</div>","links":{"Fun":"/test.html","testJson":"/test.json","hello":"std.docker","Docker":"https://docs.docker.com"},"css":"<div>test {<br>&nbsp; overflow: hidden;<br>}<br><br></div>","keywords":{"$dockerPort":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; This is the port the docker container will connect to the application port<br>&nbsp; &nbsp; and expose on your local.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","/password/get":"<pre>&lt;p&gt;<br>&nbsp; This url is used to get password values. You need to have a token in order to<br>&nbsp; recieve the password.<br>&nbsp; &lt;div&gt;<br>&nbsp; &nbsp; &lt;h4&gt;Post parameters&lt;/h4&gt;<br>&nbsp; &nbsp; &lt;ul&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;collectionIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;passwordIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;token&lt;/li&gt;<br>&nbsp; &nbsp; &lt;/ul&gt;<br>&nbsp; &lt;/div&gt;<br>&lt;/p&gt;</pre>","appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","COLLECTION_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; This allows you to group your identifiers. Identifies with the same group will<br>&nbsp; be located in the same encrypted file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; Using a unique &lt;z&gt;COLLECTION_IDENTIFIER&lt;/z&gt; it will restrict one password to each<br>&nbsp; file.<br>&lt;/p&gt;</pre>","collectionIdentifier":"<div>@COLLECTION_IDENTIFIER</div>","docker":"<pre>&lt;b&gt;\n  A light weight container utility for isolating and standardizing\n  the environment in which your application runs.\n  &lt;br&gt;\n  &lt;br&gt;\n  Docker\n&lt;/b&gt;</pre>","dockerCommand":"<pre>&lt;div&gt;\n  &lt;b&gt;docker run --name confidentialInfo -v $installPath/info:/password-server/info -p $dockerPort:$appPort -ti pass/ub bash&lt;/b&gt;\n&lt;/div&gt;</pre>","edit":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b class='warning'&gt;AVOID USING THIS COMMAND!&lt;/b&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; To help prevent accedental password loss the the old contents are saved<br>&nbsp; &nbsp; within the log file when you close the editor. This could result in a log<br>&nbsp; &nbsp; file containing most of your current passwords.<br>&nbsp; &nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &nbsp; It is Much more secure to use view command to view file and update command<br>&nbsp; &nbsp; to to change values.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","FILE_LOC":"<pre>&lt;p&gt;<br>&nbsp; The file you wish to perform the given opperation on.<br>&lt;/p&gt;</pre>","help":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; If you need &lt;b&gt;help&lt;/b&gt; understanding what &lt;b&gt;help&lt;/b&gt; is I can't<br>&nbsp; &nbsp; &lt;b&gt;help&lt;/b&gt; you.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","log":"<pre>&lt;p&gt;<br>&nbsp; The &lt;z&gt;log&lt;/z&gt; exists to aid you in acidental overwrites. It saves data after it has<br>&nbsp; been updated. So Ideally, only old usless info should be found in this file.<br>&nbsp; &lt;br&gt;<br>&nbsp; &lt;b&gt;However&lt;/b&gt;, see edit command to uderstand how current passwords may be<br>&nbsp; saved.<br>&lt;/p&gt;</pre>","NEW_VALUE":"<pre>&lt;p&gt;\n  A new value to be assigned to the given identifier within a given collection.\n&lt;/p&gt;</pre>","PASSWORD_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; Values are saved as a key value pair within the encrypted files. This<br>&nbsp; identifies the which value to retrieve within the specified collection.<br>&lt;/p&gt;</pre>","passwordIdentifier":"<div>@PASSWORD_IDENTIFIER</div>","PORT":"<pre>&lt;p&gt;<br>&nbsp; &lt;div class='center'&gt;&lt;b&gt;{{currPort}}&lt;/b&gt;&lt;/div&gt;<br>&nbsp; The port that the server is to be run or currently is on.<br>&lt;/p&gt;</pre>","remove":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","replace":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","run.sh":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A simple script that:\n      Starts application within docker container, if you are on windows this dockerCommand should work if you have docker installed;\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","setup-server":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;This command does two things:&lt;/p&gt;<br>&nbsp; &lt;ol&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; Creates a token - to be passed as a post parameter when accessing<br>&nbsp; &nbsp; &nbsp; passwords via the server.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; While creating the token you can add a password to the collection.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &lt;/ol&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b&gt;NOTE&lt;/b&gt;: PASSWORD_IDENTIFIER and NEW_VALUE are both optional.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","start-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. The &lt;b&gt;default&lt;/b&gt; becomes the last port the<br>&nbsp; application was run on.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; The current default is &lt;b id='curr-port'&gt;{{currPort}}&lt;/b&gt;.<br>&lt;/p&gt;</pre>","stop-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. By &lt;b&gt;default&lt;/b&gt; it will kill the process<br>&nbsp; running on the last port this application was started from.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &lt;b&gt;NOTE&lt;b&gt;: This will kill any proccess running on the given port<br>&lt;/p&gt;</pre>","sudo":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; Out side of a docker container this program requires admin privileges.<br>&nbsp; &nbsp; These privileges allow the script to prevent any other users from accessing<br>&nbsp; &nbsp; these files. In retro spect I would have liked to lock this based on a<br>&nbsp; &nbsp; user instead of admin but what the hell it works.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","token":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A collection &lt;z&gt;token&lt;/z&gt; is used to verify a request has autorization to access passwords.\n    &lt;br&gt;&lt;br&gt;\n    You can access your &lt;z&gt;token&lt;/z&gt; with:\n    &lt;br&gt;\n    sudo confidentalInfo.sh value COLLECTION_IDENTIFIER &lt;z&gt;token&lt;/z&gt;\n    &lt;br&gt;\n    You must pass this &lt;z&gt;token&lt;/z&gt; to your application in order to access you passwords.\n    &lt;br&gt;\n    &lt;br&gt;\n    If you want some additional security you can set &lt;z&gt;update&lt;/z&gt;Tokens=true, within\n    a given collection and the application will update the token every time it\n    is requested.\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;b&gt;Note&lt;/b&gt;: Tokens are special in that you do not have to set them. If you\n    request a &lt;z&gt;token&lt;/z&gt; that does not exist. It will be generated.\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","update":"<pre>&lt;p&gt;\n  This updates the identifier with the new value.\n  &lt;br&gt;&lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: Leaving the newVal blank will a random password. If you do not need to type the password often you\n  should use this method it is far more secure than a password you are likely\n  to create.\n&lt;/p&gt;</pre>","value":"<pre>&lt;p&gt;<br>&nbsp; The command will print the value to the command line. I have not found any<br>&nbsp; source that says the terminal stores program output anywhere. You should<br>&nbsp; atleast make sure that you clear or reset the terminal shortly after using<br>&nbsp; this command.<br>&lt;/p&gt;</pre>","view":"<pre>&lt;p&gt;<br>&nbsp; This creates a temporary folder that displays the contents of a given<br>&nbsp; collection, and it is destroyed when gedit closes.<br>&lt;/p&gt;</pre>","random password":"<div>By default this is a random string of 30 characters making it next to impossible to guess.</div>","random token":"<div>You can set this value. However by using the server-setup a random password is generated.</div>","default-port":"<div>The default port is always the last port you ran the server on. If you forget the port this command will print it.</div>","get-with-token":"<div>This command is purely for the node server to retrieve passwords with the token.</div>","$installPath":"<pre>&lt;p&gt;\n  The path to then PasswordServer installation directory.\n&lt;/p&gt;</pre>","$appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","get-token-docker":"<pre>&lt;p&gt;\n  Requests a token for a given COLLECTION_IDENTIFIER from the running docker container.\n  &lt;br&gt;\n  &lt;br&gt;\n  Example use: java -jar application.jar $(sudo confidentialInfo.sh get-token-docker application)\n  &lt;br&gt;\n  &lt;br&gt;\n  Giving your application the token necessary to access all passwords  for your application.\n&lt;/p&gt;</pre>"},"_keywords":{}},
{"content":"<pre>&lt;div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Install&lt;/h2&gt;\n    &lt;p&gt;\n      Simply clone from git\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;git clone https://github.com/jozsefmorrissey/PasswordServer.git&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Setup&lt;/h2&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;./run.sh - linux docker script&lt;/b&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;b&gt;./installGlobal.sh - linux bin installation&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Terminal Commands&lt;/h2&gt;\n    &lt;p&gt;\n      The files containing the data are encrypted and admin protected therefore\n      admin privaliges are required. This means the following commands will be\n      prefixed by:\n      &lt;br&gt;\n      &lt;b&gt;sudo confidentalInfo.sh...&lt;/b&gt;\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"cmd in cmds\"&gt;\n        &lt;b&gt;{{cmd}}&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Server&lt;/h2&gt;\n    &lt;p&gt;\n      A server was added to allow docker containers to easily communicate.\n    &lt;/p&gt;\n    &lt;p&gt;\n      These urls are secured with a random token.\n      &lt;br&gt;\n      http://www.localhost:[default-port]...\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"url in urls\"&gt;\n        &lt;b&gt;{{url}} &lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre>","data":"<div>{<br>&nbsp; \"dockerCommand\": \"docker run -p $dockerPort:$appPort -ti pass/ub bash\",<br>&nbsp; \"cmds\": {<br>&nbsp; &nbsp; \"edit\": \"edit COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"view\": \"view COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"value\": \"value COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"update\": \"update COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"replace\": \"replace COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"remove\": \"remove COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"log\": \"log \",<br>&nbsp; &nbsp; \"help\": \"help\",<br>&nbsp; &nbsp; \"setup-server\": \"setup-server COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"stop-server\": \"stop-server PORT\",<br>&nbsp; &nbsp; \"start-server\": \"start-server PORT\",<br>&nbsp; &nbsp; \"default-port\": \"default-port\",<br>&nbsp; &nbsp; \"get-with-token\": \"get-with-token TOKEN COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"get-token-docker\": \"get-token-docker COLLECTION_IDENTIFIER\"<br>&nbsp; },<br>&nbsp; \"urls\": [<br>&nbsp; &nbsp; \"/password/get\"<br>&nbsp; ]<br>}</div>","links":{"Fun":"/test.html","testJson":"/test.json","hello":"std.docker","Docker":"https://docs.docker.com"},"css":"<div>test {<br>&nbsp; overflow: hidden;<br>}<br><br></div>","keywords":{"$dockerPort":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; This is the port the docker container will connect to the application port<br>&nbsp; &nbsp; and expose on your local.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","/password/get":"<pre>&lt;p&gt;<br>&nbsp; This url is used to get password values. You need to have a token in order to<br>&nbsp; recieve the password.<br>&nbsp; &lt;div&gt;<br>&nbsp; &nbsp; &lt;h4&gt;Post parameters&lt;/h4&gt;<br>&nbsp; &nbsp; &lt;ul&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;collectionIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;passwordIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;token&lt;/li&gt;<br>&nbsp; &nbsp; &lt;/ul&gt;<br>&nbsp; &lt;/div&gt;<br>&lt;/p&gt;</pre>","appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","COLLECTION_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; This allows you to group your identifiers. Identifies with the same group will<br>&nbsp; be located in the same encrypted file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; Using a unique &lt;z&gt;COLLECTION_IDENTIFIER&lt;/z&gt; it will restrict one password to each<br>&nbsp; file.<br>&lt;/p&gt;</pre>","collectionIdentifier":"<div>@COLLECTION_IDENTIFIER</div>","docker":"<pre>&lt;p&gt;\n  A light weight container utility for isolating and standardizing\n  the environment in which your application runs.\n  &lt;br&gt;\n  &lt;br&gt;\n  Docker\n  &lt;br&gt;\n  &lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: All commands have to be run witin or without the docker container. For some reason updating files in both environment corrupts the encryption.\n&lt;/p&gt;</pre>","dockerCommand":"<pre>&lt;div&gt;\n  &lt;b&gt;docker run --name confidentialInfo -v $installPath/info:/password-server/info -p $dockerPort:$appPort -ti pass/ub bash&lt;/b&gt;\n&lt;/div&gt;</pre>","edit":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b class='warning'&gt;AVOID USING THIS COMMAND!&lt;/b&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; To help prevent accedental password loss the the old contents are saved<br>&nbsp; &nbsp; within the log file when you close the editor. This could result in a log<br>&nbsp; &nbsp; file containing most of your current passwords.<br>&nbsp; &nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &nbsp; It is Much more secure to use view command to view file and update command<br>&nbsp; &nbsp; to to change values.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","FILE_LOC":"<pre>&lt;p&gt;<br>&nbsp; The file you wish to perform the given opperation on.<br>&lt;/p&gt;</pre>","help":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; If you need &lt;b&gt;help&lt;/b&gt; understanding what &lt;b&gt;help&lt;/b&gt; is I can't<br>&nbsp; &nbsp; &lt;b&gt;help&lt;/b&gt; you.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","log":"<pre>&lt;p&gt;<br>&nbsp; The &lt;z&gt;log&lt;/z&gt; exists to aid you in acidental overwrites. It saves data after it has<br>&nbsp; been updated. So Ideally, only old usless info should be found in this file.<br>&nbsp; &lt;br&gt;<br>&nbsp; &lt;b&gt;However&lt;/b&gt;, see edit command to uderstand how current passwords may be<br>&nbsp; saved.<br>&lt;/p&gt;</pre>","NEW_VALUE":"<pre>&lt;p&gt;\n  A new value to be assigned to the given identifier within a given collection.\n&lt;/p&gt;</pre>","PASSWORD_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; Values are saved as a key value pair within the encrypted files. This<br>&nbsp; identifies the which value to retrieve within the specified collection.<br>&lt;/p&gt;</pre>","passwordIdentifier":"<div>@PASSWORD_IDENTIFIER</div>","PORT":"<pre>&lt;p&gt;<br>&nbsp; &lt;div class='center'&gt;&lt;b&gt;{{currPort}}&lt;/b&gt;&lt;/div&gt;<br>&nbsp; The port that the server is to be run or currently is on.<br>&lt;/p&gt;</pre>","remove":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","replace":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","run.sh":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A simple script that:\n      Starts application within docker container, if you are on windows this dockerCommand should work if you have docker installed;\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","setup-server":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;This command does two things:&lt;/p&gt;<br>&nbsp; &lt;ol&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; Creates a token - to be passed as a post parameter when accessing<br>&nbsp; &nbsp; &nbsp; passwords via the server.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; While creating the token you can add a password to the collection.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &lt;/ol&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b&gt;NOTE&lt;/b&gt;: PASSWORD_IDENTIFIER and NEW_VALUE are both optional.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","start-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. The &lt;b&gt;default&lt;/b&gt; becomes the last port the<br>&nbsp; application was run on.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; The current default is &lt;b id='curr-port'&gt;{{currPort}}&lt;/b&gt;.<br>&lt;/p&gt;</pre>","stop-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. By &lt;b&gt;default&lt;/b&gt; it will kill the process<br>&nbsp; running on the last port this application was started from.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &lt;b&gt;NOTE&lt;b&gt;: This will kill any proccess running on the given port<br>&lt;/p&gt;</pre>","sudo":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; Out side of a docker container this program requires admin privileges.<br>&nbsp; &nbsp; These privileges allow the script to prevent any other users from accessing<br>&nbsp; &nbsp; these files. In retro spect I would have liked to lock this based on a<br>&nbsp; &nbsp; user instead of admin but what the hell it works.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","token":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A collection &lt;z&gt;token&lt;/z&gt; is used to verify a request has autorization to access passwords.\n    &lt;br&gt;&lt;br&gt;\n    You can access your &lt;z&gt;token&lt;/z&gt; with:\n    &lt;br&gt;\n    sudo confidentalInfo.sh value COLLECTION_IDENTIFIER &lt;z&gt;token&lt;/z&gt;\n    &lt;br&gt;\n    You must pass this &lt;z&gt;token&lt;/z&gt; to your application in order to access you passwords.\n    &lt;br&gt;\n    &lt;br&gt;\n    If you want some additional security you can set &lt;z&gt;update&lt;/z&gt;Tokens=true, within\n    a given collection and the application will update the token every time it\n    is requested.\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;b&gt;Note&lt;/b&gt;: Tokens are special in that you do not have to set them. If you\n    request a &lt;z&gt;token&lt;/z&gt; that does not exist. It will be generated.\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","update":"<pre>&lt;p&gt;\n  This updates the identifier with the new value.\n  &lt;br&gt;&lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: Leaving the newVal blank will a random password. If you do not need to type the password often you\n  should use this method it is far more secure than a password you are likely\n  to create.\n&lt;/p&gt;</pre>","value":"<pre>&lt;p&gt;<br>&nbsp; The command will print the value to the command line. I have not found any<br>&nbsp; source that says the terminal stores program output anywhere. You should<br>&nbsp; atleast make sure that you clear or reset the terminal shortly after using<br>&nbsp; this command.<br>&lt;/p&gt;</pre>","view":"<pre>&lt;p&gt;<br>&nbsp; This creates a temporary folder that displays the contents of a given<br>&nbsp; collection, and it is destroyed when gedit closes.<br>&lt;/p&gt;</pre>","random password":"<div>By default this is a random string of 30 characters making it next to impossible to guess.</div>","random token":"<div>You can set this value. However by using the server-setup a random password is generated.</div>","default-port":"<div>The default port is always the last port you ran the server on. If you forget the port this command will print it.</div>","get-with-token":"<div>This command is purely for the node server to retrieve passwords with the token.</div>","$installPath":"<pre>&lt;p&gt;\n  The path to then PasswordServer installation directory.\n&lt;/p&gt;</pre>","$appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","get-token-docker":"<pre>&lt;p&gt;\n  Requests a token for a given COLLECTION_IDENTIFIER from the running docker container.\n  &lt;br&gt;\n  &lt;br&gt;\n  Example use: java -jar application.jar $(sudo confidentialInfo.sh get-token-docker application)\n  &lt;br&gt;\n  &lt;br&gt;\n  Giving your application the token necessary to access all passwords  for your application.\n&lt;/p&gt;</pre>"},"_keywords":{}},
{"content":"<pre>&lt;div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Install&lt;/h2&gt;\n    &lt;p&gt;\n      Simply clone from git\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;git clone https://github.com/jozsefmorrissey/PasswordServer.git&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Setup&lt;/h2&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;./run.sh - linux docker script&lt;/b&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;b&gt;./installGlobal.sh - linux bin installation&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Terminal Commands&lt;/h2&gt;\n    &lt;p&gt;\n      The files containing the data are encrypted and admin protected therefore\n      admin privaliges are required. This means the following commands will be\n      prefixed by:\n      &lt;br&gt;\n      &lt;b&gt;sudo confidentalInfo.sh...&lt;/b&gt;\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"cmd in cmds\"&gt;\n        &lt;b&gt;{{cmd}}&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Server&lt;/h2&gt;\n    &lt;p&gt;\n      A server was added to allow docker containers to easily communicate.\n    &lt;/p&gt;\n    &lt;p&gt;\n      These urls are secured with a random token.\n      &lt;br&gt;\n      http://www.localhost:[default-port]...\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"url in urls\"&gt;\n        &lt;b&gt;{{url}} &lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre>","data":"<div>{<br>&nbsp; \"dockerCommand\": \"docker run -p $dockerPort:$appPort -ti pass/ub bash\",<br>&nbsp; \"cmds\": {<br>&nbsp; &nbsp; \"edit\": \"edit COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"view\": \"view COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"value\": \"value COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"update\": \"update COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"replace\": \"replace COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"remove\": \"remove COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"log\": \"log \",<br>&nbsp; &nbsp; \"help\": \"help\",<br>&nbsp; &nbsp; \"setup-server\": \"setup-server COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"stop-server\": \"stop-server PORT\",<br>&nbsp; &nbsp; \"start-server\": \"start-server PORT\",<br>&nbsp; &nbsp; \"default-port\": \"default-port\",<br>&nbsp; &nbsp; \"get-with-token\": \"get-with-token TOKEN COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"get-token-docker\": \"get-token-docker COLLECTION_IDENTIFIER\"<br>&nbsp; },<br>&nbsp; \"urls\": [<br>&nbsp; &nbsp; \"/password/get\"<br>&nbsp; ]<br>}</div>","links":{"Fun":"/test.html","testJson":"/test.json","Install":"std.docker","Docker":"https://docs.docker.com"},"css":"<div>test {<br>&nbsp; overflow: hidden;<br>}<br><br></div>","keywords":{"$dockerPort":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; This is the port the docker container will connect to the application port<br>&nbsp; &nbsp; and expose on your local.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","/password/get":"<pre>&lt;p&gt;<br>&nbsp; This url is used to get password values. You need to have a token in order to<br>&nbsp; recieve the password.<br>&nbsp; &lt;div&gt;<br>&nbsp; &nbsp; &lt;h4&gt;Post parameters&lt;/h4&gt;<br>&nbsp; &nbsp; &lt;ul&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;collectionIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;passwordIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;token&lt;/li&gt;<br>&nbsp; &nbsp; &lt;/ul&gt;<br>&nbsp; &lt;/div&gt;<br>&lt;/p&gt;</pre>","appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","COLLECTION_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; This allows you to group your identifiers. Identifies with the same group will<br>&nbsp; be located in the same encrypted file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; Using a unique &lt;z&gt;COLLECTION_IDENTIFIER&lt;/z&gt; it will restrict one password to each<br>&nbsp; file.<br>&lt;/p&gt;</pre>","collectionIdentifier":"<div>@COLLECTION_IDENTIFIER</div>","docker":"<pre>&lt;p&gt;\n  A light weight container utility for isolating and standardizing\n  the environment in which your application runs.\n  &lt;br&gt;\n  &lt;br&gt;\n  Docker\n  &lt;br&gt;\n  &lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: All commands have to be run witin or without the docker container. For some reason updating files in both environment corrupts the encryption.\n&lt;/p&gt;</pre>","dockerCommand":"<pre>&lt;div&gt;\n  &lt;b&gt;docker run --name confidentialInfo -v $installPath/info:/password-server/info -p $dockerPort:$appPort -ti pass/ub bash&lt;/b&gt;\n&lt;/div&gt;</pre>","edit":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b class='warning'&gt;AVOID USING THIS COMMAND!&lt;/b&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; To help prevent accedental password loss the the old contents are saved<br>&nbsp; &nbsp; within the log file when you close the editor. This could result in a log<br>&nbsp; &nbsp; file containing most of your current passwords.<br>&nbsp; &nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &nbsp; It is Much more secure to use view command to view file and update command<br>&nbsp; &nbsp; to to change values.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","FILE_LOC":"<pre>&lt;p&gt;<br>&nbsp; The file you wish to perform the given opperation on.<br>&lt;/p&gt;</pre>","help":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; If you need &lt;b&gt;help&lt;/b&gt; understanding what &lt;b&gt;help&lt;/b&gt; is I can't<br>&nbsp; &nbsp; &lt;b&gt;help&lt;/b&gt; you.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","log":"<pre>&lt;p&gt;<br>&nbsp; The &lt;z&gt;log&lt;/z&gt; exists to aid you in acidental overwrites. It saves data after it has<br>&nbsp; been updated. So Ideally, only old usless info should be found in this file.<br>&nbsp; &lt;br&gt;<br>&nbsp; &lt;b&gt;However&lt;/b&gt;, see edit command to uderstand how current passwords may be<br>&nbsp; saved.<br>&lt;/p&gt;</pre>","NEW_VALUE":"<pre>&lt;p&gt;\n  A new value to be assigned to the given identifier within a given collection.\n&lt;/p&gt;</pre>","PASSWORD_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; Values are saved as a key value pair within the encrypted files. This<br>&nbsp; identifies the which value to retrieve within the specified collection.<br>&lt;/p&gt;</pre>","passwordIdentifier":"<div>@PASSWORD_IDENTIFIER</div>","PORT":"<pre>&lt;p&gt;<br>&nbsp; &lt;div class='center'&gt;&lt;b&gt;{{currPort}}&lt;/b&gt;&lt;/div&gt;<br>&nbsp; The port that the server is to be run or currently is on.<br>&lt;/p&gt;</pre>","remove":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","replace":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","run.sh":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A simple script that:\n      Starts application within docker container, if you are on windows this dockerCommand should work if you have docker installed;\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","setup-server":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;This command does two things:&lt;/p&gt;<br>&nbsp; &lt;ol&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; Creates a token - to be passed as a post parameter when accessing<br>&nbsp; &nbsp; &nbsp; passwords via the server.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; While creating the token you can add a password to the collection.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &lt;/ol&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b&gt;NOTE&lt;/b&gt;: PASSWORD_IDENTIFIER and NEW_VALUE are both optional.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","start-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. The &lt;b&gt;default&lt;/b&gt; becomes the last port the<br>&nbsp; application was run on.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; The current default is &lt;b id='curr-port'&gt;{{currPort}}&lt;/b&gt;.<br>&lt;/p&gt;</pre>","stop-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. By &lt;b&gt;default&lt;/b&gt; it will kill the process<br>&nbsp; running on the last port this application was started from.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &lt;b&gt;NOTE&lt;b&gt;: This will kill any proccess running on the given port<br>&lt;/p&gt;</pre>","sudo":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; Out side of a docker container this program requires admin privileges.<br>&nbsp; &nbsp; These privileges allow the script to prevent any other users from accessing<br>&nbsp; &nbsp; these files. In retro spect I would have liked to lock this based on a<br>&nbsp; &nbsp; user instead of admin but what the hell it works.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","token":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A collection &lt;z&gt;token&lt;/z&gt; is used to verify a request has autorization to access passwords.\n    &lt;br&gt;&lt;br&gt;\n    You can access your &lt;z&gt;token&lt;/z&gt; with:\n    &lt;br&gt;\n    sudo confidentalInfo.sh value COLLECTION_IDENTIFIER &lt;z&gt;token&lt;/z&gt;\n    &lt;br&gt;\n    You must pass this &lt;z&gt;token&lt;/z&gt; to your application in order to access you passwords.\n    &lt;br&gt;\n    &lt;br&gt;\n    If you want some additional security you can set &lt;z&gt;update&lt;/z&gt;Tokens=true, within\n    a given collection and the application will update the token every time it\n    is requested.\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;b&gt;Note&lt;/b&gt;: Tokens are special in that you do not have to set them. If you\n    request a &lt;z&gt;token&lt;/z&gt; that does not exist. It will be generated.\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","update":"<pre>&lt;p&gt;\n  This updates the identifier with the new value.\n  &lt;br&gt;&lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: Leaving the newVal blank will a random password. If you do not need to type the password often you\n  should use this method it is far more secure than a password you are likely\n  to create.\n&lt;/p&gt;</pre>","value":"<pre>&lt;p&gt;<br>&nbsp; The command will print the value to the command line. I have not found any<br>&nbsp; source that says the terminal stores program output anywhere. You should<br>&nbsp; atleast make sure that you clear or reset the terminal shortly after using<br>&nbsp; this command.<br>&lt;/p&gt;</pre>","view":"<pre>&lt;p&gt;<br>&nbsp; This creates a temporary folder that displays the contents of a given<br>&nbsp; collection, and it is destroyed when gedit closes.<br>&lt;/p&gt;</pre>","random password":"<div>By default this is a random string of 30 characters making it next to impossible to guess.</div>","random token":"<div>You can set this value. However by using the server-setup a random password is generated.</div>","default-port":"<div>The default port is always the last port you ran the server on. If you forget the port this command will print it.</div>","get-with-token":"<div>This command is purely for the node server to retrieve passwords with the token.</div>","$installPath":"<pre>&lt;p&gt;\n  The path to then PasswordServer installation directory.\n&lt;/p&gt;</pre>","$appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","get-token-docker":"<pre>&lt;p&gt;\n  Requests a token for a given COLLECTION_IDENTIFIER from the running docker container.\n  &lt;br&gt;\n  &lt;br&gt;\n  Example use: java -jar application.jar $(sudo confidentialInfo.sh get-token-docker application)\n  &lt;br&gt;\n  &lt;br&gt;\n  Giving your application the token necessary to access all passwords  for your application.\n&lt;/p&gt;</pre>"},"_keywords":{},"inheritedKeywords":{}},
{"content":"<pre>&lt;div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Install&lt;/h2&gt;\n    &lt;p&gt;\n      Simply clone from git\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;git clone https://github.com/jozsefmorrissey/PasswordServer.git&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Setup&lt;/h2&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;./run.sh - linux docker script&lt;/b&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;b&gt;./installGlobal.sh - linux bin installation&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Terminal Commands&lt;/h2&gt;\n    &lt;p&gt;\n      The files containing the data are encrypted and admin protected therefore\n      admin privaliges are required. This means the following commands will be\n      prefixed by:\n      &lt;br&gt;\n      &lt;b&gt;sudo confidentalInfo.sh...&lt;/b&gt;\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"cmd in cmds\"&gt;\n        &lt;b&gt;{{cmd}}&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Server&lt;/h2&gt;\n    &lt;p&gt;\n      A server was added to allow docker containers to easily communicate.\n    &lt;/p&gt;\n    &lt;p&gt;\n      These urls are secured with a random token.\n      &lt;br&gt;\n      http://www.localhost:[default-port]...\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"url in urls\"&gt;\n        &lt;b&gt;{{url}} &lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre>","data":"<div>{<br>&nbsp; \"dockerCommand\": \"docker run -p $dockerPort:$appPort -ti pass/ub bash\",<br>&nbsp; \"cmds\": {<br>&nbsp; &nbsp; \"edit\": \"edit COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"view\": \"view COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"value\": \"value COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"update\": \"update COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"replace\": \"replace COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"remove\": \"remove COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"log\": \"log \",<br>&nbsp; &nbsp; \"help\": \"help\",<br>&nbsp; &nbsp; \"setup-server\": \"setup-server COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"stop-server\": \"stop-server PORT\",<br>&nbsp; &nbsp; \"start-server\": \"start-server PORT\",<br>&nbsp; &nbsp; \"default-port\": \"default-port\",<br>&nbsp; &nbsp; \"get-with-token\": \"get-with-token TOKEN COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"get-token-docker\": \"get-token-docker COLLECTION_IDENTIFIER\"<br>&nbsp; },<br>&nbsp; \"urls\": [<br>&nbsp; &nbsp; \"/password/get\"<br>&nbsp; ]<br>}</div>","links":{"Fun":"/test.html","testJson":"/test.json","Install":"std.docker","Docker":"https://docs.docker.com"},"css":"<div>test {<br>&nbsp; overflow: hidden;<br>}<br><br></div>","keywords":{"$dockerPort":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; This is the port the docker container will connect to the application port<br>&nbsp; &nbsp; and expose on your local.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","/password/get":"<pre>&lt;p&gt;<br>&nbsp; This url is used to get password values. You need to have a token in order to<br>&nbsp; recieve the password.<br>&nbsp; &lt;div&gt;<br>&nbsp; &nbsp; &lt;h4&gt;Post parameters&lt;/h4&gt;<br>&nbsp; &nbsp; &lt;ul&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;collectionIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;passwordIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;token&lt;/li&gt;<br>&nbsp; &nbsp; &lt;/ul&gt;<br>&nbsp; &lt;/div&gt;<br>&lt;/p&gt;</pre>","appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","COLLECTION_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; This allows you to group your identifiers. Identifies with the same group will<br>&nbsp; be located in the same encrypted file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; Using a unique &lt;z&gt;COLLECTION_IDENTIFIER&lt;/z&gt; it will restrict one password to each<br>&nbsp; file.<br>&lt;/p&gt;</pre>","collectionIdentifier":"<div>@COLLECTION_IDENTIFIER</div>","docker":"<pre>&lt;p&gt;\n  A light weight container utility for isolating and standardizing\n  the environment in which your application runs.\n  &lt;br&gt;\n  &lt;br&gt;\n  Docker\n  &lt;br&gt;\n  &lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: All commands have to be run witin or without the docker container. For some reason updating files in both environment corrupts the encryption.\n&lt;/p&gt;</pre>","dockerCommand":"<pre>&lt;div&gt;\n  &lt;b&gt;docker run --name confidentialInfo -v $installPath/info:/password-server/info -p $dockerPort:$appPort -ti pass/ub bash&lt;/b&gt;\n&lt;/div&gt;</pre>","edit":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b class='warning'&gt;AVOID USING THIS COMMAND!&lt;/b&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; To help prevent accedental password loss the the old contents are saved<br>&nbsp; &nbsp; within the log file when you close the editor. This could result in a log<br>&nbsp; &nbsp; file containing most of your current passwords.<br>&nbsp; &nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &nbsp; It is Much more secure to use view command to view file and update command<br>&nbsp; &nbsp; to to change values.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","FILE_LOC":"<pre>&lt;p&gt;<br>&nbsp; The file you wish to perform the given opperation on.<br>&lt;/p&gt;</pre>","help":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; If you need &lt;b&gt;help&lt;/b&gt; understanding what &lt;b&gt;help&lt;/b&gt; is I can't<br>&nbsp; &nbsp; &lt;b&gt;help&lt;/b&gt; you.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","log":"<pre>&lt;p&gt;<br>&nbsp; The &lt;z&gt;log&lt;/z&gt; exists to aid you in acidental overwrites. It saves data after it has<br>&nbsp; been updated. So Ideally, only old usless info should be found in this file.<br>&nbsp; &lt;br&gt;<br>&nbsp; &lt;b&gt;However&lt;/b&gt;, see edit command to uderstand how current passwords may be<br>&nbsp; saved.<br>&lt;/p&gt;</pre>","NEW_VALUE":"<pre>&lt;p&gt;\n  A new value to be assigned to the given identifier within a given collection.\n&lt;/p&gt;</pre>","PASSWORD_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; Values are saved as a key value pair within the encrypted files. This<br>&nbsp; identifies the which value to retrieve within the specified collection.<br>&lt;/p&gt;</pre>","passwordIdentifier":"<div>@PASSWORD_IDENTIFIER</div>","PORT":"<pre>&lt;p&gt;<br>&nbsp; &lt;div class='center'&gt;&lt;b&gt;{{currPort}}&lt;/b&gt;&lt;/div&gt;<br>&nbsp; The port that the server is to be run or currently is on.<br>&lt;/p&gt;</pre>","remove":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","replace":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","run.sh":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A simple script that:\n      Starts application within docker container, if you are on windows this dockerCommand should work if you have docker installed;\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","setup-server":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;This command does two things:&lt;/p&gt;<br>&nbsp; &lt;ol&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; Creates a token - to be passed as a post parameter when accessing<br>&nbsp; &nbsp; &nbsp; passwords via the server.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; While creating the token you can add a password to the collection.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &lt;/ol&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b&gt;NOTE&lt;/b&gt;: PASSWORD_IDENTIFIER and NEW_VALUE are both optional.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","start-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. The &lt;b&gt;default&lt;/b&gt; becomes the last port the<br>&nbsp; application was run on.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; The current default is &lt;b id='curr-port'&gt;{{currPort}}&lt;/b&gt;.<br>&lt;/p&gt;</pre>","stop-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. By &lt;b&gt;default&lt;/b&gt; it will kill the process<br>&nbsp; running on the last port this application was started from.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &lt;b&gt;NOTE&lt;b&gt;: This will kill any proccess running on the given port<br>&lt;/p&gt;</pre>","sudo":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; Out side of a docker container this program requires admin privileges.<br>&nbsp; &nbsp; These privileges allow the script to prevent any other users from accessing<br>&nbsp; &nbsp; these files. In retro spect I would have liked to lock this based on a<br>&nbsp; &nbsp; user instead of admin but what the hell it works.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","token":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A collection &lt;z&gt;token&lt;/z&gt; is used to verify a request has autorization to access passwords.\n    &lt;br&gt;&lt;br&gt;\n    You can access your &lt;z&gt;token&lt;/z&gt; with:\n    &lt;br&gt;\n    sudo confidentalInfo.sh value COLLECTION_IDENTIFIER &lt;z&gt;token&lt;/z&gt;\n    &lt;br&gt;\n    You must pass this &lt;z&gt;token&lt;/z&gt; to your application in order to access you passwords.\n    &lt;br&gt;\n    &lt;br&gt;\n    If you want some additional security you can set &lt;z&gt;update&lt;/z&gt;Tokens=true, within\n    a given collection and the application will update the token every time it\n    is requested.\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;b&gt;Note&lt;/b&gt;: Tokens are special in that you do not have to set them. If you\n    request a &lt;z&gt;token&lt;/z&gt; that does not exist. It will be generated.\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","update":"<pre>&lt;p&gt;\n  This updates the identifier with the new value.\n  &lt;br&gt;&lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: Leaving the newVal blank will a random password. If you do not need to type the password often you\n  should use this method it is far more secure than a password you are likely\n  to create.\n&lt;/p&gt;</pre>","value":"<pre>&lt;p&gt;<br>&nbsp; The command will print the value to the command line. I have not found any<br>&nbsp; source that says the terminal stores program output anywhere. You should<br>&nbsp; atleast make sure that you clear or reset the terminal shortly after using<br>&nbsp; this command.<br>&lt;/p&gt;</pre>","view":"<pre>&lt;p&gt;<br>&nbsp; This creates a temporary folder that displays the contents of a given<br>&nbsp; collection, and it is destroyed when gedit closes.<br>&lt;/p&gt;</pre>","random password":"<div>By default this is a random string of 30 characters making it next to impossible to guess.</div>","random token":"<div>You can set this value. However by using the server-setup a random password is generated.</div>","default-port":"<div>The default port is always the last port you ran the server on. If you forget the port this command will print it.</div>","get-with-token":"<div>This command is purely for the node server to retrieve passwords with the token.</div>","$installPath":"<pre>&lt;p&gt;\n  The path to then PasswordServer installation directory.\n&lt;/p&gt;</pre>","$appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","get-token-docker":"<pre>&lt;p&gt;\n  Requests a token for a given COLLECTION_IDENTIFIER from the running docker container.\n  &lt;br&gt;\n  &lt;br&gt;\n  Example use: java -jar application.jar $(sudo confidentialInfo.sh get-token-docker application)\n  &lt;br&gt;\n  &lt;br&gt;\n  Giving your application the token necessary to access all passwords  for your application.\n&lt;/p&gt;</pre>"},"_keywords":{},"inheritedKeywords":{}},
{"content":"<pre>&lt;div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Install&lt;/h2&gt;\n    &lt;p&gt;\n      Simply clone from git\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;git clone https://github.com/jozsefmorrissey/PasswordServer.git&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Setup&lt;/h2&gt;\n    &lt;div class='left'&gt;\n      &lt;div&gt;\n        &lt;b&gt;./run.sh - linux docker script&lt;/b&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;b&gt;./installGlobal.sh - linux bin installation&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Terminal Commands&lt;/h2&gt;\n    &lt;p&gt;\n      The files containing the data are encrypted and admin protected therefore\n      admin privaliges are required. This means the following commands will be\n      prefixed by:\n      &lt;br&gt;\n      &lt;b&gt;sudo confidentalInfo.sh...&lt;/b&gt;\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"cmd in cmds\"&gt;\n        &lt;b&gt;{{cmd}}&lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class='center two-thirds'&gt;\n    &lt;h2&gt;Server&lt;/h2&gt;\n    &lt;p&gt;\n      A server was added to allow docker containers to easily communicate.\n    &lt;/p&gt;\n    &lt;p&gt;\n      These urls are secured with a random token.\n      &lt;br&gt;\n      http://www.localhost:[default-port]...\n    &lt;/p&gt;\n    &lt;div class='left'&gt;\n      &lt;div ng-repeat=\"url in urls\"&gt;\n        &lt;b&gt;{{url}} &lt;/b&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre>","data":"<div>{<br>&nbsp; \"dockerCommand\": \"docker run -p $dockerPort:$appPort -ti pass/ub bash\",<br>&nbsp; \"cmds\": {<br>&nbsp; &nbsp; \"edit\": \"edit COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"view\": \"view COLLECTION_IDENTIFIER\",<br>&nbsp; &nbsp; \"value\": \"value COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"update\": \"update COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"replace\": \"replace COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"remove\": \"remove COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER FILE_LOC\",<br>&nbsp; &nbsp; \"log\": \"log \",<br>&nbsp; &nbsp; \"help\": \"help\",<br>&nbsp; &nbsp; \"setup-server\": \"setup-server COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER NEW_VALUE\",<br>&nbsp; &nbsp; \"stop-server\": \"stop-server PORT\",<br>&nbsp; &nbsp; \"start-server\": \"start-server PORT\",<br>&nbsp; &nbsp; \"default-port\": \"default-port\",<br>&nbsp; &nbsp; \"get-with-token\": \"get-with-token TOKEN COLLECTION_IDENTIFIER PASSWORD_IDENTIFIER\",<br>&nbsp; &nbsp; \"get-token-docker\": \"get-token-docker COLLECTION_IDENTIFIER\"<br>&nbsp; },<br>&nbsp; \"urls\": [<br>&nbsp; &nbsp; \"/password/get\"<br>&nbsp; ]<br>}</div>","links":{"Fun":"/test.html","testJson":"/test.json","Install":"std.docker","Docker":"https://docs.docker.com"},"css":"<div>test {<br>&nbsp; overflow: hidden;<br>}<br><br></div>","keywords":{"$dockerPort":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; This is the port the docker container will connect to the application port<br>&nbsp; &nbsp; and expose on your local.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","/password/get":"<pre>&lt;p&gt;<br>&nbsp; This url is used to get password values. You need to have a token in order to<br>&nbsp; recieve the password.<br>&nbsp; &lt;div&gt;<br>&nbsp; &nbsp; &lt;h4&gt;Post parameters&lt;/h4&gt;<br>&nbsp; &nbsp; &lt;ul&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;collectionIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;passwordIdentifier&lt;/li&gt;<br>&nbsp; &nbsp; &nbsp; &lt;li&gt;token&lt;/li&gt;<br>&nbsp; &nbsp; &lt;/ul&gt;<br>&nbsp; &lt;/div&gt;<br>&lt;/p&gt;</pre>","appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","COLLECTION_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; This allows you to group your identifiers. Identifies with the same group will<br>&nbsp; be located in the same encrypted file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; Using a unique &lt;z&gt;COLLECTION_IDENTIFIER&lt;/z&gt; it will restrict one password to each<br>&nbsp; file.<br>&lt;/p&gt;</pre>","collectionIdentifier":"<div>@COLLECTION_IDENTIFIER</div>","docker":"<pre>&lt;p&gt;\n  A light weight container utility for isolating and standardizing\n  the environment in which your application runs.\n  &lt;br&gt;\n  &lt;br&gt;\n  Docker\n  &lt;br&gt;\n  &lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: All commands have to be run witin or without the docker container. For some reason updating files in both environment corrupts the encryption.\n&lt;/p&gt;</pre>","dockerCommand":"<pre>&lt;div&gt;\n  &lt;b&gt;docker run --name confidentialInfo -v $installPath/info:/password-server/info -p $dockerPort:$appPort -ti pass/ub bash&lt;/b&gt;\n&lt;/div&gt;</pre>","edit":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b class='warning'&gt;AVOID USING THIS COMMAND!&lt;/b&gt;<br>&nbsp; &nbsp; &lt;br&gt;<br>&nbsp; &nbsp; To help prevent accedental password loss the the old contents are saved<br>&nbsp; &nbsp; within the log file when you close the editor. This could result in a log<br>&nbsp; &nbsp; file containing most of your current passwords.<br>&nbsp; &nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &nbsp; It is Much more secure to use view command to view file and update command<br>&nbsp; &nbsp; to to change values.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","FILE_LOC":"<pre>&lt;p&gt;<br>&nbsp; The file you wish to perform the given opperation on.<br>&lt;/p&gt;</pre>","help":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; If you need &lt;b&gt;help&lt;/b&gt; understanding what &lt;b&gt;help&lt;/b&gt; is I can't<br>&nbsp; &nbsp; &lt;b&gt;help&lt;/b&gt; you.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","log":"<pre>&lt;p&gt;<br>&nbsp; The &lt;z&gt;log&lt;/z&gt; exists to aid you in acidental overwrites. It saves data after it has<br>&nbsp; been updated. So Ideally, only old usless info should be found in this file.<br>&nbsp; &lt;br&gt;<br>&nbsp; &lt;b&gt;However&lt;/b&gt;, see edit command to uderstand how current passwords may be<br>&nbsp; saved.<br>&lt;/p&gt;</pre>","NEW_VALUE":"<pre>&lt;p&gt;\n  A new value to be assigned to the given identifier within a given collection.\n&lt;/p&gt;</pre>","PASSWORD_IDENTIFIER":"<pre>&lt;p&gt;<br>&nbsp; Values are saved as a key value pair within the encrypted files. This<br>&nbsp; identifies the which value to retrieve within the specified collection.<br>&lt;/p&gt;</pre>","passwordIdentifier":"<div>@PASSWORD_IDENTIFIER</div>","PORT":"<pre>&lt;p&gt;<br>&nbsp; &lt;div class='center'&gt;&lt;b&gt;{{currPort}}&lt;/b&gt;&lt;/div&gt;<br>&nbsp; The port that the server is to be run or currently is on.<br>&lt;/p&gt;</pre>","remove":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","replace":"<pre>&lt;p&gt;<br>&nbsp; This replaces passwords within a given file.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; For example...<br>&nbsp; &lt;br&gt;<br>&nbsp; If the file ./prop.txt contains a line \"dbPass=12345\"<br>&nbsp; &lt;br&gt;<br>&nbsp; and<br>&nbsp; &lt;br&gt;<br>&nbsp; Within collection myApp it has the &lt;b&gt;key-value&lt;/b&gt; password=12345.<br>&nbsp; &lt;br&gt;<br>&nbsp; Then after running...<br>&nbsp; &lt;br&gt;<br>&nbsp; sudo confidentalInfo.sh remove myApp password ./prop.txt<br>&nbsp; &lt;br&gt;<br>&nbsp; That line would be changed to \"dbPass=_{password}_\".<br>&lt;/p&gt;</pre>","run.sh":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A simple script that:\n      Starts application within docker container, if you are on windows this dockerCommand should work if you have docker installed;\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","setup-server":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;This command does two things:&lt;/p&gt;<br>&nbsp; &lt;ol&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; Creates a token - to be passed as a post parameter when accessing<br>&nbsp; &nbsp; &nbsp; passwords via the server.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &nbsp; &lt;li&gt;<br>&nbsp; &nbsp; &nbsp; While creating the token you can add a password to the collection.<br>&nbsp; &nbsp; &lt;/li&gt;<br>&nbsp; &lt;/ol&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; &lt;b&gt;NOTE&lt;/b&gt;: PASSWORD_IDENTIFIER and NEW_VALUE are both optional.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","start-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. The &lt;b&gt;default&lt;/b&gt; becomes the last port the<br>&nbsp; application was run on.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; The current default is &lt;b id='curr-port'&gt;{{currPort}}&lt;/b&gt;.<br>&lt;/p&gt;</pre>","stop-server":"<pre>&lt;p&gt;<br>&nbsp; The port parameter is optional. By &lt;b&gt;default&lt;/b&gt; it will kill the process<br>&nbsp; running on the last port this application was started from.<br>&nbsp; &lt;br&gt;&lt;br&gt;<br>&nbsp; &lt;b&gt;NOTE&lt;b&gt;: This will kill any proccess running on the given port<br>&lt;/p&gt;</pre>","sudo":"<pre>&lt;div&gt;<br>&nbsp; &lt;p&gt;<br>&nbsp; &nbsp; Out side of a docker container this program requires admin privileges.<br>&nbsp; &nbsp; These privileges allow the script to prevent any other users from accessing<br>&nbsp; &nbsp; these files. In retro spect I would have liked to lock this based on a<br>&nbsp; &nbsp; user instead of admin but what the hell it works.<br>&nbsp; &lt;/p&gt;<br>&lt;/div&gt;</pre>","token":"<pre>&lt;div&gt;\n  &lt;p&gt;\n    A collection &lt;z&gt;token&lt;/z&gt; is used to verify a request has autorization to access passwords.\n    &lt;br&gt;&lt;br&gt;\n    You can access your &lt;z&gt;token&lt;/z&gt; with:\n    &lt;br&gt;\n    sudo confidentalInfo.sh value COLLECTION_IDENTIFIER &lt;z&gt;token&lt;/z&gt;\n    &lt;br&gt;\n    You must pass this &lt;z&gt;token&lt;/z&gt; to your application in order to access you passwords.\n    &lt;br&gt;\n    &lt;br&gt;\n    If you want some additional security you can set &lt;z&gt;update&lt;/z&gt;Tokens=true, within\n    a given collection and the application will update the token every time it\n    is requested.\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;b&gt;Note&lt;/b&gt;: Tokens are special in that you do not have to set them. If you\n    request a &lt;z&gt;token&lt;/z&gt; that does not exist. It will be generated.\n  &lt;/p&gt;\n&lt;/div&gt;</pre>","update":"<pre>&lt;p&gt;\n  This updates the identifier with the new value.\n  &lt;br&gt;&lt;br&gt;\n  &lt;b class='warning'&gt;IMPORTANT&lt;/b&gt;: Leaving the newVal blank will a random password. If you do not need to type the password often you\n  should use this method it is far more secure than a password you are likely\n  to create.\n&lt;/p&gt;</pre>","value":"<pre>&lt;p&gt;<br>&nbsp; The command will print the value to the command line. I have not found any<br>&nbsp; source that says the terminal stores program output anywhere. You should<br>&nbsp; atleast make sure that you clear or reset the terminal shortly after using<br>&nbsp; this command.<br>&lt;/p&gt;</pre>","view":"<pre>&lt;p&gt;<br>&nbsp; This creates a temporary folder that displays the contents of a given<br>&nbsp; collection, and it is destroyed when gedit closes.<br>&lt;/p&gt;</pre>","random password":"<div>By default this is a random string of 30 characters making it next to impossible to guess.</div>","random token":"<div>You can set this value. However by using the server-setup a random password is generated.</div>","default-port":"<div>The default port is always the last port you ran the server on. If you forget the port this command will print it.</div>","get-with-token":"<div>This command is purely for the node server to retrieve passwords with the token.</div>","$installPath":"<pre>&lt;p&gt;\n  The path to then PasswordServer installation directory.\n&lt;/p&gt;</pre>","$appPort":"<pre>&lt;div&gt;\n  This variable needs to be the port that the server will be running on\n  within the docker container. This port can be determined by running\n  the following command:\n  &lt;br&gt;\n  &lt;br&gt;\n  sudo ./confidentalInfo.sh value confidentalInfo port\n&lt;/div&gt;</pre>","get-token-docker":"<pre>&lt;p&gt;\n  Requests a token for a given COLLECTION_IDENTIFIER from the running docker container.\n  &lt;br&gt;\n  &lt;br&gt;\n  Example use: java -jar application.jar $(sudo confidentialInfo.sh get-token-docker application)\n  &lt;br&gt;\n  &lt;br&gt;\n  Giving your application the token necessary to access all passwords  for your application.\n&lt;/p&gt;</pre>"},"_keywords":{},"inheritedKeywords":{}},
